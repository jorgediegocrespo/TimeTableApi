// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeTable.DataAccess;

namespace TimeTable.DataAccess.Migrations
{
    [DbContext(typeof(TimeTableDbContext))]
    [Migration("20210122130759_20210122_01")]
    partial class _20210122_01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.BankDayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("BankDays");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.CompanyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.HolidayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ConfirmingPersonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PersonRequestingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmingPersonId");

                    b.HasIndex("PersonRequestingId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.PersonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("People");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.VacationDayEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("VacationDays")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("VacationDays");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.BankDayEntity", b =>
                {
                    b.HasOne("TimeTable.DataAccess.Contracts.Entities.CompanyEntity", "Company")
                        .WithMany("BankDays")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.HolidayEntity", b =>
                {
                    b.HasOne("TimeTable.DataAccess.Contracts.Entities.PersonEntity", "ConfirmingPerson")
                        .WithMany("ConfirmedHolidays")
                        .HasForeignKey("ConfirmingPersonId");

                    b.HasOne("TimeTable.DataAccess.Contracts.Entities.PersonEntity", "PersonRequesting")
                        .WithMany("HolidaysRequested")
                        .HasForeignKey("PersonRequestingId");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.PersonEntity", b =>
                {
                    b.HasOne("TimeTable.DataAccess.Contracts.Entities.CompanyEntity", "Company")
                        .WithMany("People")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("TimeTable.DataAccess.Contracts.Entities.VacationDayEntity", b =>
                {
                    b.HasOne("TimeTable.DataAccess.Contracts.Entities.PersonEntity", "Person")
                        .WithMany("VacationDays")
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
