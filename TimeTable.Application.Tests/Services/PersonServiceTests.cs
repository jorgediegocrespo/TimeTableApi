using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using TimeTable.Application.Constants;
using TimeTable.Application.Contracts.Configuration;
using TimeTable.Application.Contracts.Services;
using TimeTable.Application.Exceptions;
using TimeTable.Application.Services;
using TimeTable.Business.Models;
using TimeTable.DataAccess.Contracts;
using TimeTable.DataAccess.Contracts.Entities;
using TimeTable.DataAccess.Contracts.Repositories;

namespace TimeTable.Application.Tests.Services
{
    [TestClass]
    public class PersonServiceTests
    {
        //TODO Add test to get picture url from azure
        private readonly Mock<IUnitOfWork> unitOfWorkMock;
        private readonly Mock<IPersonRepository> personRepositoryMock;
        private readonly Mock<IAppConfig> appConfigMock;
        private readonly Mock<IUserService> userServiceMock;
        private readonly Mock<IFileStorage> fileStorageMock;

        public PersonServiceTests()
        {
            unitOfWorkMock = new Mock<IUnitOfWork>();
            personRepositoryMock = new Mock<IPersonRepository>();
            appConfigMock = new Mock<IAppConfig>();
            userServiceMock = new Mock<IUserService>();
            fileStorageMock = new Mock<IFileStorage>();
        }

        [TestMethod]
        public async Task GetAll_Ok()
        {
            int pageSize = 5;
            List<PersonEntity> givenPeopleList = GivenPeopleList(pageSize);
            personRepositoryMock.Setup(x => x.GetAllAsync(It.IsAny<int>(), It.IsAny<int>())).ReturnsAsync(givenPeopleList);
            personRepositoryMock.Setup(x => x.GetTotalRecordsAsync()).ReturnsAsync(22);

            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            PaginatedResponse<ReadingPerson> people = await personService.GetAllAsync(new PaginationRequest { PageSize = pageSize, PageNumber = 1});

            Assert.AreEqual(22, people.TotalRegisters);
            Assert.AreEqual(pageSize, people.Result.Count());
        }

        [TestMethod]
        public async Task Get_Ok()
        {
            int personId = 1;
            PersonEntity givenPerson = GivenDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);

            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            ReadingPerson person = await personService.GetAsync(personId);

            Assert.AreEqual(givenPerson.Id, person.Id);
            Assert.AreEqual(givenPerson.Name, person.Name);
            Assert.AreEqual(givenPerson.IsDefault, person.IsDefault);
        }

        [TestMethod]
        public async Task GetOwn_Ok()
        {
            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            userServiceMock.Setup(x => x.GetContextPersonIdAsync()).ReturnsAsync(personId);

            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            ReadingPerson person = await personService.GetOwnAsync();

            Assert.AreEqual(givenPerson.Id, person.Id);
            Assert.AreEqual(givenPerson.Name, person.Name);
            Assert.AreEqual(givenPerson.IsDefault, person.IsDefault);
        }

        [TestMethod]
        public async Task Add_Ok()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.SaveChangesInTransactionAsync(It.IsAny<Func<Task<int>>>())).Callback<Func<Task<int>>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            personRepositoryMock.Setup(x => x.ExistsAsync(It.IsAny<int>(), It.IsAny<string>())).ReturnsAsync(false);
            personRepositoryMock.Setup(x => x.AddAsync(It.IsAny<PersonEntity>())).Returns(Task.CompletedTask);
            fileStorageMock.Setup(x => x.SaveFileAsync(It.IsAny<byte[]>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).ReturnsAsync(Guid.NewGuid().ToString());

            CreatingPerson person = new CreatingPerson()
            {
                Name = "Person 1",
                Email = "person1@test.com",
                Password = "Person1_1234",
                Role = Role.Employee,
                Picture = Convert.FromBase64String("")
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            int personId = await personService.AddAsync(person);

            Assert.IsInstanceOfType(personId, typeof(int));
            Assert.AreEqual(null, resultException);
        }

        [TestMethod]
        public async Task Add_PersonNameExistsError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.SaveChangesInTransactionAsync(It.IsAny<Func<Task<int>>>())).Callback<Func<Task<int>>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            personRepositoryMock.Setup(x => x.ExistsAsync(It.IsAny<int>(), It.IsAny<string>())).ReturnsAsync(true);
            personRepositoryMock.Setup(x => x.AddAsync(It.IsAny<PersonEntity>())).Returns(Task.CompletedTask);
            fileStorageMock.Setup(x => x.SaveFileAsync(It.IsAny<byte[]>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).ReturnsAsync(Guid.NewGuid().ToString());

            CreatingPerson person = new CreatingPerson()
            {
                Name = "Person 1",
                Email = "person1@test.com",
                Password = "Person1_1234",
                Role = Role.Employee,
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            int result = await personService.AddAsync(person);

            Assert.AreEqual(0, result);
            Assert.IsInstanceOfType(resultException, typeof(NotValidOperationException));
            Assert.AreEqual(ErrorCodes.PERSON_NAME_EXISTS, resultException.Message);
        }

        [TestMethod]
        public async Task Add_FileStorageError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.SaveChangesInTransactionAsync(It.IsAny<Func<Task<int>>>())).Callback<Func<Task<int>>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            personRepositoryMock.Setup(x => x.ExistsAsync(It.IsAny<int>(), It.IsAny<string>())).ReturnsAsync(false);
            personRepositoryMock.Setup(x => x.AddAsync(It.IsAny<PersonEntity>())).Returns(Task.CompletedTask);
            fileStorageMock.Setup(x => x.SaveFileAsync(It.IsAny<byte[]>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Throws(new Exception());

            CreatingPerson person = new CreatingPerson()
            {
                Name = "Person 1",
                Email = "person1@test.com",
                Password = "Person1_1234",
                Role = Role.Employee,
                Picture = Convert.FromBase64String("")
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            int result = await personService.AddAsync(person);

            Assert.AreEqual(0, result);
            Assert.IsInstanceOfType(resultException, typeof(Exception));
        }

        [TestMethod]
        public void Update_Ok()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            userServiceMock.Setup(x => x.GetContextPersonIdAsync()).ReturnsAsync(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            personRepositoryMock.Setup(x => x.ExistsAsync(It.IsAny<int>(), It.IsAny<string>())).ReturnsAsync(false);
            personRepositoryMock.Setup(x => x.AttachAsync(It.IsAny<int>(), It.IsAny<byte[]>())).ReturnsAsync(new PersonEntity { Id = givenPerson.Id, RowVersion = givenPerson.RowVersion});
            fileStorageMock.Setup(x => x.UpdateFileAsync(It.IsAny<byte[]>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).ReturnsAsync(Guid.NewGuid().ToString());

            UpdatingPerson person = new UpdatingPerson()
            {
                Id = personId,
                Name = "Person updated",
                RowVersion = givenPerson.RowVersion,
                Picture = Convert.FromBase64String("")
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            var result = personService.UpdateAsync(person);

            Assert.AreEqual(Task.CompletedTask, result);
        }

        [TestMethod]
        public async Task Update_PersonNameExistsError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            userServiceMock.Setup(x => x.GetContextPersonIdAsync()).ReturnsAsync(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            personRepositoryMock.Setup(x => x.ExistsAsync(It.IsAny<int>(), It.IsAny<string>())).ReturnsAsync(true);
            personRepositoryMock.Setup(x => x.AttachAsync(It.IsAny<int>(), It.IsAny<byte[]>())).ReturnsAsync(new PersonEntity { Id = givenPerson.Id, RowVersion = givenPerson.RowVersion });
            fileStorageMock.Setup(x => x.UpdateFileAsync(It.IsAny<byte[]>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).ReturnsAsync(Guid.NewGuid().ToString());

            UpdatingPerson person = new UpdatingPerson()
            {
                Id = personId,
                Name = "Person updated",
                RowVersion = givenPerson.RowVersion
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            await personService.UpdateAsync(person);

            Assert.IsInstanceOfType(resultException, typeof(NotValidOperationException));
            Assert.AreEqual(ErrorCodes.PERSON_NAME_EXISTS, resultException.Message);
        }

        [TestMethod]
        public async Task Update_ForbidenError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            userServiceMock.Setup(x => x.GetContextPersonIdAsync()).ReturnsAsync(1);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            personRepositoryMock.Setup(x => x.ExistsAsync(It.IsAny<int>(), It.IsAny<string>())).ReturnsAsync(false);
            personRepositoryMock.Setup(x => x.AttachAsync(It.IsAny<int>(), It.IsAny<byte[]>())).ReturnsAsync(new PersonEntity { Id = givenPerson.Id, RowVersion = givenPerson.RowVersion });
            fileStorageMock.Setup(x => x.UpdateFileAsync(It.IsAny<byte[]>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).ReturnsAsync(Guid.NewGuid().ToString());

            UpdatingPerson person = new UpdatingPerson()
            {
                Id = personId,
                Name = "Person updated",
                RowVersion = givenPerson.RowVersion,
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            await personService.UpdateAsync(person);

            Assert.IsInstanceOfType(resultException, typeof(ForbidenActionException));
        }

        [TestMethod]
        public async Task Update_FileStorageError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            userServiceMock.Setup(x => x.GetContextPersonIdAsync()).ReturnsAsync(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            personRepositoryMock.Setup(x => x.ExistsAsync(It.IsAny<int>(), It.IsAny<string>())).ReturnsAsync(false);
            personRepositoryMock.Setup(x => x.AttachAsync(It.IsAny<int>(), It.IsAny<byte[]>())).ReturnsAsync(new PersonEntity { Id = givenPerson.Id, RowVersion = givenPerson.RowVersion });
            fileStorageMock.Setup(x => x.UpdateFileAsync(It.IsAny<byte[]>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>(), It.IsAny<string>())).Throws(new Exception());

            UpdatingPerson person = new UpdatingPerson()
            {
                Id = personId,
                Name = "Person updated",
                RowVersion = givenPerson.RowVersion,
                Picture = Convert.FromBase64String("")
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            await personService.UpdateAsync(person);

            Assert.IsInstanceOfType(resultException, typeof(Exception));
        }

        [TestMethod]
        public void UpdateRole_Ok()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            userServiceMock.Setup(x => x.RemoveFromRoleAsync(It.IsAny<string>())).Returns(Task.CompletedTask);
            userServiceMock.Setup(x => x.AddToRoleAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.CompletedTask);

            UpdatingPersonRole personRole = new UpdatingPersonRole()
            {
                Id = personId,
                Role = Role.Admin,
                RowVersion = givenPerson.RowVersion
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            var result = personService.UpdateRoleAsync(personRole);

            Assert.AreEqual(Task.CompletedTask, result);
        }

        [TestMethod]
        public void UpdateRole_PersonNotExistsError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).Returns(Task.FromResult<PersonEntity>(null));
            userServiceMock.Setup(x => x.RemoveFromRoleAsync(It.IsAny<string>())).Returns(Task.CompletedTask);
            userServiceMock.Setup(x => x.AddToRoleAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.CompletedTask);

            Random rnd = new Random();
            Byte[] rndRowVersion = new Byte[8];
            rnd.NextBytes(rndRowVersion);
            UpdatingPersonRole personRole = new UpdatingPersonRole()
            {
                Id = 1,
                Role = Role.Admin,
                RowVersion = rndRowVersion
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            var result = personService.UpdateRoleAsync(personRole);

            Assert.IsInstanceOfType(resultException, typeof(NotValidOperationException));
            Assert.AreEqual(ErrorCodes.ITEM_NOT_EXISTS, resultException.Message);
        }

        [TestMethod]
        public void UpdateRole_ConcurrencyConflict()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            userServiceMock.Setup(x => x.RemoveFromRoleAsync(It.IsAny<string>())).Returns(Task.CompletedTask);
            userServiceMock.Setup(x => x.AddToRoleAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.CompletedTask);

            Random rnd = new Random();
            Byte[] rndRowVersion = new Byte[8];
            rnd.NextBytes(rndRowVersion);
            UpdatingPersonRole personRole = new UpdatingPersonRole()
            {
                Id = personId,
                Role = Role.Admin,
                RowVersion = rndRowVersion
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            var result = personService.UpdateRoleAsync(personRole);

            Assert.IsInstanceOfType(resultException, typeof(DbUpdateConcurrencyException));
        }

        [TestMethod]
        public void UpdateRole_RemoveRoleError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            userServiceMock.Setup(x => x.RemoveFromRoleAsync(It.IsAny<string>())).Throws(new NotValidOperationException(ErrorCodes.USER_UPDATING_ROLE_ERROR, "Error setting user role"));
            userServiceMock.Setup(x => x.AddToRoleAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.CompletedTask);

            UpdatingPersonRole personRole = new UpdatingPersonRole()
            {
                Id = personId,
                Role = Role.Admin,
                RowVersion = givenPerson.RowVersion
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            var result = personService.UpdateRoleAsync(personRole);

            Assert.AreEqual(Task.CompletedTask, result);
        }

        [TestMethod]
        public void UpdateRole_AddRoleError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });

            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            userServiceMock.Setup(x => x.RemoveFromRoleAsync(It.IsAny<string>())).Throws(new NotValidOperationException(ErrorCodes.USER_UPDATING_ROLE_ERROR, "Error setting user role"));
            userServiceMock.Setup(x => x.AddToRoleAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.CompletedTask);

            UpdatingPersonRole personRole = new UpdatingPersonRole()
            {
                Id = personId,
                Role = Role.Admin,
                RowVersion = givenPerson.RowVersion
            };
            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            var result = personService.UpdateRoleAsync(personRole);

            Assert.AreEqual(Task.CompletedTask, result);
        }

        [TestMethod]
        public async Task Delete_Ok()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });
            int personId = 2;
            PersonEntity givenPerson = GivenNonDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            personRepositoryMock.Setup(x => x.DeleteAsync(It.IsAny<int>(), It.IsAny<byte[]>())).Returns(Task.CompletedTask);
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            userServiceMock.Setup(x => x.DeleteAsync(It.IsAny<string>())).Returns(Task.CompletedTask);
            fileStorageMock.Setup(x => x.DeleteFileAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.CompletedTask);

            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            await personService.DeleteAsync(new DeleteRequest { Id = givenPerson.Id, RowVersion = givenPerson.RowVersion });

            Assert.AreEqual(null, resultException);
        }

        [TestMethod]
        public async Task Delete_PersonDefaultError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });
            int personId = 2;
            PersonEntity givenPerson = GivenDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            personRepositoryMock.Setup(x => x.DeleteAsync(It.IsAny<int>(), It.IsAny<byte[]>())).Returns(Task.CompletedTask);
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            userServiceMock.Setup(x => x.DeleteAsync(It.IsAny<string>())).Returns(Task.CompletedTask);
            fileStorageMock.Setup(x => x.DeleteFileAsync(It.IsAny<string>(), It.IsAny<string>())).Returns(Task.CompletedTask);

            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            await personService.DeleteAsync(new DeleteRequest { Id = givenPerson.Id, RowVersion = givenPerson.RowVersion });

            Assert.IsInstanceOfType(resultException, typeof(NotValidOperationException));
            Assert.AreEqual(ErrorCodes.PERSON_DEFAULT, resultException.Message);
        }

        [TestMethod]
        public async Task Delete_FileStorageError()
        {
            Exception resultException = null;
            unitOfWorkMock.Setup(x => x.ExecuteInTransactionAsync(It.IsAny<Func<Task>>())).Callback<Func<Task>>(async func =>
            {
                try { await func.Invoke(); }
                catch (Exception ex) { resultException = ex; }
            });
            int personId = 2;
            PersonEntity givenPerson = GivenDefaultPerson(personId);
            personRepositoryMock.Setup(x => x.GetAsync(It.IsAny<int>())).ReturnsAsync(givenPerson);
            personRepositoryMock.Setup(x => x.DeleteAsync(It.IsAny<int>(), It.IsAny<byte[]>())).Returns(Task.CompletedTask);
            unitOfWorkMock.Setup(x => x.SaveChangesAsync(It.IsAny<CancellationToken>())).ReturnsAsync(1);
            userServiceMock.Setup(x => x.DeleteAsync(It.IsAny<string>())).Returns(Task.CompletedTask);
            fileStorageMock.Setup(x => x.DeleteFileAsync(It.IsAny<string>(), It.IsAny<string>())).Throws(new Exception());

            PersonService personService = new PersonService(unitOfWorkMock.Object, personRepositoryMock.Object, appConfigMock.Object, userServiceMock.Object, fileStorageMock.Object);
            await personService.DeleteAsync(new DeleteRequest { Id = givenPerson.Id, RowVersion = givenPerson.RowVersion });

            Assert.IsInstanceOfType(resultException, typeof(Exception));
        }

        private List<PersonEntity> GivenPeopleList(int count)
        {
            var result = new List<PersonEntity> { new PersonEntity { Id = 1, Name = "Admin", IsDefault = true }};

            for (int i = 2; i <= count; i++)
                result.Add(new PersonEntity { Id = i, Name = $"Person {i}", PictureUrl = Guid.NewGuid().ToString(), IsDefault = false });

            return result;
        }

        private PersonEntity GivenNonDefaultPerson(int personId)
        {
            Random rnd = new Random();
            Byte[] rndRowVersion = new Byte[8];
            rnd.NextBytes(rndRowVersion);
            return new PersonEntity { Id = personId, Name = $"Person {personId}", PictureUrl = Guid.NewGuid().ToString(), IsDefault = false, RowVersion = rndRowVersion };
        }

        private PersonEntity GivenDefaultPerson(int personId)
        {
            Random rnd = new Random();
            Byte[] rndRowVersion = new Byte[8];
            rnd.NextBytes(rndRowVersion);
            return new PersonEntity { Id = personId, Name = $"Person {personId}", PictureUrl = Guid.NewGuid().ToString(), IsDefault = true, RowVersion = rndRowVersion };
        }
    }
}
